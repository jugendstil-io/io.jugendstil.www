{"version":3,"sources":["webpack:///./src/templates/thoughts-on-programming-post.js"],"names":["ThoughtsOnProgrammingPost","data","pageContext","image","allFile","edges","map","it","node","pop","console","log","childImageSharp","thought","Object","assign","current","sizes","fluid","src","srcSet","Array","isArray","description","Error","id","string","Intl","DateTimeFormat","year","month","day","formatToParts","Date","createdAt","value","dangerouslySetInnerHTML","__html","className","title","author","quote","join","replace","openGraph","href","URL","THOUGHTS_ON_PROGRAMMING","alt","prev","rel","path","next","pageQuery"],"mappings":"0OAwHeA,UA9GmB,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACnCC,EAAQF,EAAKG,QAAQC,MAAMC,KAAI,SAAAC,GAAE,OAAIA,EAAGC,QAAMC,MAEpDC,QAAQC,IAAI,oCACZD,QAAQC,IAAIR,EAAMS,iBAElB,IAAMC,EAAUC,OAAOC,OACrB,GADcD,OAAA,UAGTZ,EAAYc,QAAQH,QAHX,CAIZV,MAAO,CACLc,MAAOd,EAAMS,gBAAgBM,MAAMD,MACnCE,IAAKhB,EAAMS,gBAAgBM,MAAMC,IACjCC,OAAQjB,EAAMS,gBAAgBM,MAAME,WAK1C,IAAKC,MAAMC,QAAQT,EAAQU,aACzB,MAAMC,MAAM,qCAC2BX,EAAQY,GADpC,2BAKb,IA1BgBC,EAE2C,EAwBpC,IAAIC,KAAKC,eAAT,KAA8B,CACnDC,KAAK,UACLC,MAAM,OACNC,IAAI,YAQaC,cAAc,IAAIC,KAAKpB,EAAQqB,YALvCJ,EA9BgD,KA8BvDK,MAEOJ,EAhCgD,KAgCvDI,MAEON,EAlCgD,KAkCvDM,MAGEZ,EAAcV,EAAQU,YAAYjB,KAAI,SAAAC,GAAE,OAC5C,uBAAG6B,wBAAyB,CAAEC,OAAQ9B,QAGxC,OACE,kBAAC,IAAD,CAAQ+B,UAAU,uCAChB,kBAAC,IAAD,CACEC,MAAK,cAAgB1B,EAAQ2B,OAAxB,KAAmC3B,EAAQ4B,MAChDlB,aA/CUG,EA+Cab,EAAQU,YAAYmB,KAAK,KA/C5BhB,EAAOiB,QAAQ,aAAc,KAgDjDxC,MAAOU,EAAQV,MAAMgB,IACrByB,UAAW,CACTL,MAAM,eAAgB1B,EAAQ2B,UAGlC,iCACE,yBAAKF,UAAU,OACb,yBAAKA,UAAU,wCACb,wBAAIA,UAAU,iBACZ,6CAEE,8BACO,IACRzB,EAAQ2B,QAEX,wBAAIF,UAAU,cACZ,4BACE,uBAAGO,KAAMC,IAAIC,yBAAb,4BAIF,4BACE,4BACGjB,EADH,IACWC,EADX,KACkBF,KAIrBN,EACD,4BAAQe,UAAU,WAChB,yBACEU,IAAKnC,EAAQ4B,MACbtB,IAAKN,EAAQV,MAAMgB,IACnBC,OAAQP,EAAQV,MAAMiB,OACtBH,MAAOJ,EAAQV,MAAMc,QAEvB,oCAAaJ,EAAQ4B,UAI3B,yBAAKH,UAAU,OACb,yBAAKA,UAAU,wCACb,wBAAIA,UAAU,wBACXpC,EAAY+C,MACX,wBAAIX,UAAU,QACZ,uBAAGY,IAAI,OAAOL,KAAM3C,EAAY+C,KAAKE,MAArC,WAKHjD,EAAYkD,MACX,wBAAId,UAAU,QACZ,uBAAGY,IAAI,OAAOL,KAAM3C,EAAYkD,KAAKD,MAArC,iBAeX,IAAME,EAAS","file":"component---src-templates-thoughts-on-programming-post-js-430217a343821c86fdfe.js","sourcesContent":["import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport Metadata from \"../components/metadata\"\n\nimport \"./thoughts-on-programming-post.scss\"\nimport URL from \"../url\"\n\nconst stripHtml = string => string.replace(/<[^>]*>?/gm, \"\")\n\nconst ThoughtsOnProgrammingPost = ({ data, pageContext }) => {\n  const image = data.allFile.edges.map(it => it.node).pop()\n\n  console.log('--------------------------------')\n  console.log(image.childImageSharp)\n\n  const thought = Object.assign(\n    {},\n    {\n      ...pageContext.current.thought,\n      image: {\n        sizes: image.childImageSharp.fluid.sizes,\n        src: image.childImageSharp.fluid.src,\n        srcSet: image.childImageSharp.fluid.srcSet,\n      },\n    }\n  )\n\n  if (!Array.isArray(thought.description)) {\n    throw Error(\n      `Property \"description\" of thought ${thought.id} must be of type array.`\n    )\n  }\n\n  const dateTimeFormat = new Intl.DateTimeFormat(`en`, {\n    year: `numeric`,\n    month: `long`,\n    day: `2-digit`,\n  })\n  const [\n    { value: month },\n    ,\n    { value: day },\n    ,\n    { value: year },\n  ] = dateTimeFormat.formatToParts(new Date(thought.createdAt))\n\n  const description = thought.description.map(it => (\n    <p dangerouslySetInnerHTML={{ __html: it }} />\n  ))\n\n  return (\n    <Layout className=\"thoughts-on-programming-detail-page\">\n      <Metadata\n        title={`Thought by ${thought.author}: ${thought.quote}`}\n        description={stripHtml(thought.description.join(\" \"))}\n        image={thought.image.src}\n        openGraph={{\n          title: `Thought by: ${thought.author}`,\n        }}\n      />\n      <section>\n        <div className=\"row\">\n          <div className=\"col-xs-12 col-sm-9 col-md-9 col-lg-9\">\n            <h1 className=\"thought-title\">\n              <small>\n                Thought by:\n                <br />\n              </small>{\" \"}\n              {thought.author}\n            </h1>\n            <ul className=\"breadcrumb\">\n              <li>\n                <a href={URL.THOUGHTS_ON_PROGRAMMING}>\n                  Thoughts On Programming\n                </a>\n              </li>\n              <li>\n                <em>\n                  {month} {day}, {year}\n                </em>\n              </li>\n            </ul>\n            {description}\n            <figure className=\"thought\">\n              <img\n                alt={thought.quote}\n                src={thought.image.src}\n                srcSet={thought.image.srcSet}\n                sizes={thought.image.sizes}\n              />\n              <figcaption>{thought.quote}</figcaption>\n            </figure>\n          </div>\n        </div>\n        <div className=\"row\">\n          <nav className=\"col-xs-12 col-sm-9 col-md-9 col-lg-9\">\n            <ul className=\"prev-next-navigation\">\n              {pageContext.prev && (\n                <li className=\"prev\">\n                  <a rel=\"prev\" href={pageContext.prev.path}>\n                    ← Prev\n                  </a>\n                </li>\n              )}\n              {pageContext.next && (\n                <li className=\"next\">\n                  <a rel=\"next\" href={pageContext.next.path}>\n                    Next →\n                  </a>\n                </li>\n              )}\n            </ul>\n          </nav>\n        </div>\n      </section>\n    </Layout>\n  )\n}\n\nexport default ThoughtsOnProgrammingPost\n\nexport const pageQuery = graphql`\n  query ThoughtsOnProgrammingPost($name: String) {\n    allFile(\n      filter: {\n        relativeDirectory: { eq: \"thoughts-on-programming\" }\n        name: { eq: $name }\n      }\n    ) {\n      edges {\n        node {\n          relativePath\n          ext\n          name\n          childImageSharp {\n            fluid {\n              sizes\n              src\n              srcSet\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}